import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        composeVersion = "1.1.1"
        accompanistVersion = "0.28.0"
        materialComposeAdapterVersion = '1.1.5'
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.android.tools.build:gradle:7.2.2'
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.5.3"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'com.android.library' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.0' apply false
}

def getApiKey() {
    def keysProperties = new Properties()
    keysProperties.load(project.rootProject.file("local.properties").newDataInputStream())
    def ApiKey = keysProperties.getProperty("api_key", "")
    return ApiKey
}

def getApiToken() {
    def keysProperties = new Properties()
    keysProperties.load(project.rootProject.file("local.properties").newDataInputStream())
    def ApiToken = keysProperties.getProperty("api_token", "")
    return ApiToken
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion = 33
                defaultConfig {
                    minSdkVersion(23)
                    targetSdkVersion(33)
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    consumerProguardFiles "consumer-rules.pro"
                }
                buildTypes {
                    debug {
                        buildConfigField("String", "API_KEY", getApiKey())
                        buildConfigField("String", "API_TOKEN", getApiToken())
                    }
                    release {
                        minifyEnabled false
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                        buildConfigField("String", "API_KEY", getApiKey())
                    }
                }
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                    coreLibraryDesugaringEnabled true
                }
                kotlinOptions {
                    jvmTarget = "1.8"
                    freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
                }
                buildFeatures {
                    dataBinding true
                    viewBinding true
                }
            }
        }
    }
    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.9"
        }
    }
}

/*allprojects {
    repositories {
        google()
        mavenCentral()
    }
}*/

task clean(type: Delete) {
    delete rootProject.buildDir
}
